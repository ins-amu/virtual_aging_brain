import numpy as np
import os
from src import data, simulation
import itertools
from tvb.simulator.lab import *

basedir  = os.path.join(
        "/mnt", "scratch", "scratch", "virtual_aging_cohort_alpha"
)

G_VECT     = np.arange(1.5,3.25,0.05)
G_LIST     = list(G_VECT.round(7))

N_VECT     = np.array([0.01,0.015,0.02,0.025,0.03,0.035,0.04,0.045,0.05])
N_LIST     = list(N_VECT.round(7))

A_VECT     = np.arange(0.0,1.0,0.05)
A_LIST     = list(A_VECT.round(2))

P_LIST     = ['sub-0024',
 'sub-0121',
 'sub-0145',
 'sub-0173',
 'sub-0189',
 'sub-0216',
 'sub-0253',
 'sub-0289',
 'sub-0377',
 'sub-0507',
 'sub-0597',
 'sub-0602',
 'sub-0651',
 'sub-0722',
 'sub-0902',
 'sub-0960',
 'sub-1021',
 'sub-1037',
 'sub-1122',
 'sub-1126',
 'sub-1155',
 'sub-1247',
 'sub-0469',
 'sub-0894',
 'sub-0976',
 'sub-1020',
 'sub-1047',
 'sub-1072',
 'sub-1135',
 'sub-0088',
 'sub-0470',
 'sub-0568',
 'sub-0666',
 'sub-0696',
 'sub-0706',
 'sub-1060',
 'sub-0026',
 'sub-0064',
 'sub-0119',
 'sub-0210',
 'sub-0232',
 'sub-0334',
 'sub-0628',
 'sub-0691',
 'sub-0718',
 'sub-0750',
 'sub-0834',
 'sub-0860',
 'sub-1040',
 'sub-1262']


N_LIST     = N_TAU
SIM_BATCH  = 4

def chunks(lst, n):
    """Yield successive n-sized chunks from lst."""
    for i in range(0, len(lst), n):
        yield lst[i:i + n]

sims = list(itertools.product(P_LIST, G_LIST, N_LIST, A_LIST))

rule target:
    input:[f"OUT_VIRT_COH_ALPHA/batch_pone_{i}.done" for i in range((len(G_VECT)*len(P_LIST)*len(N_LIST)*len(A_LIST)) // SIM_BATCH)]

rule simulate:
    output:
        os.path.join(basedir, "julich_data_group_rs_pat{pat}_G{G}_nsigma{nsig}_alpha1{a}_cohort_heun.npz")
    group: "simgroup"
    shell:
        "python scripts/run_vab_github.py -G {wildcards.G} -n {wildcards.nsig} -o {output} -p {wildcards.pat} -a {wildcards.a} -l 30000"

for i, chunk in enumerate(chunks(sims, SIM_BATCH)):
    rule:
        input: [os.path.join(basedir, f"julich_data_group_rs_pat{pat}_G{G}_nsigma{nsig}_alpha1{a}_cohort_heun.npz") for (pat,G,nsig,a) in chunk]
        group: "simgroup"
        output: touch(f"OUT_VIRT_COH_ALPHA/batch_pone_{i}.done")